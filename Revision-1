   I 1- Create a *deployment* with the nginx image *image:1.14.2* showing all the containers running and a ready status.
     2- Create a * service* exposing the deployment as a * NodePort* and see that the webserver is working.
     3- Update the deployment to run *nginx:1.11-alpine* and reverify you can view the webserver via a nodeport.


   II LIVENESSPROBE AND READINESSPROBE
  
     1- Deploy a new nginx websever.And a *livenessProbe* and *ReadinessProbe* on port 80
         Test that both probes and the websever work
   III

     1- Create a new secret called *class26* using the key entree and the value *devops*
     2- Create a new deployment called *webapp* running the *nginx image*
     3- Add the *class26* secret to pod mounted as volume under the /school/ directory.
     4- Execute a bash shell inside a *webapp* pod and verify the secret has been properly mounted.
     5- update the deployment to use the nginx:1.12.1-alpine and verify the new image is in use.
     6- Rollback the deployment and verify the typical, cuurent table version of nginx is in use again.

   IV-  AUTHENTICATION AND AUTHORIZATION

     You are cluster admin and during successful interview process, a new devops engineer called john was hired to work on a new project.
   You need to give kely access ( authentication) withi a namespace in the cluster and permit kely (authorization/RBAC) to work on the cluster.

   FOR AUTHENTICATION
    1- Tokens
    2- Certificate
       - openssl key
       - create a signing in request
       - generate the cluster certificate ca.crt and ca.key
     set the credentials into the cluster
     set the context (user)
    3- webhook (LDAAP)
  FOR AUTHORIZATION
    1 - RBAC
        create role
        create rolebinding
===================================================================================================================================================
 to know who is working on the cluster
    kubectl config get-contexts
    kubectl config view
    create ns
    create user and passwd
    create the key - k8s doc , look for authentication 
    first ( generate the openssl genrsa -out john.key 2048 )
                openssl req -new -key john.key -out john-csr -subj "/CN=john/O=devops"
    cluster cert --> first check the path where the ca.crt will be stored ( systemctl status kubelet.service ) ( ls /etc/kubernetes/pki)
                    
              sudo openssl x509 -req -in john-csr -CA /etc/kubernetes/pki/ca.crt -CAkey /etc/kubernetes/pki/ca.key -CAcreateserial -out john.crt -days 10
     ===>To set user credential in the cluste 
            ===> kubectl config set-credentials john --client-certificate=/home/ubuntu/john.crt --client-key=/home/ubuntu/john.key
     ===>To set the context for user ===> kubectl config set-context john-context --cluster=kubernetes --user=john --namespace=devops

     ===>To to k8s doc and look for role,rolebindning
     ===>To test if its done:
                       kubectl get pod kube-system --context=john-context
                       kubectl config get-contexts
                       kubectl run nginx --image=nginx --context=john-context
                       kubectl get pod --context=john-context 
=============================================================================================================================================================

                       TAINT and TOLERATION

- Taints are used when doing updates of the cluster and patching
- Taints can equally be used when some workloads require resources that some nodes may not have, so you what to restrict those nodes so that those workloads will be deployed on those specific nodes.
      ===> Prefer noSchedule
      ===> NoSchedule
      ===> NoExecute
 - A taint has 
      ===> Key value (det by kubernetes admin)
      ===> Taint effect
    
    1 - create a deployment which will deploy 6 nginx containers
    2 - View on which nodes the pods are running. ==> kubectl get pod -o wide
    3 - Delete the deployment and apply a taint  ===> kubectl taint node (worker) kely=value:NoExecute
    4 - Deploy the nginx deployment and observe how to put a schedule 
         ===> to remove the taint kubectl taint node (worker) kely-  ( for a master node --> kubectl taint nodes ip-172-31-41-116 node-role.kubernetes.io/control-plane:NoSchedule-

    5 - Apply a taint of NoSchedule.
        To put Toleration --> k8s doc

==============================================================================================================================================================


    We have 2 app that should run with an nginx image and expose via a NodePort
           app1 = Blue
           app2 = Green
    1 - Use a Configmap to modify the context of the webpage (imperative==> kubectl create configmap blue-cm --from-file=//home/ubuntu/project1/index.html )
    2 - Have a customized message in a file called index.html for both applications
    3 - Use the index.html to create a configMap
    4 -  Mount the ConfigMap into the container as a volume. ( default mount path for nginx--> /usr/share/nginx/html )
    5 - Use ingress to expose the 2 applicationsusing the domain name from the local DNS.
                
   
   
            
