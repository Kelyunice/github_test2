   I 1- Create a *deployment* with the nginx image *image:1.14.2* showing all the containers running and a ready status.
     2- Create a * service* exposing the deployment as a * NodePort* and see that the webserver is working.
     3- Update the deployment to run *nginx:1.11-alpine* and reverify you can view the webserver via a nodeport.


   II LIVENESSPROBE AND READINESSPROBE
  
     1- Deploy a new nginx websever.And a *livenessProbe* and *ReadinessProbe* on port 80
         Test that both probes and the websever work
   III

     1- Create a new secret called *class26* using the key entree and the value *devops*
     2- Create a new deployment called *webapp* running the *nginx image*
     3- Add the *class26* secret to pod mounted as volume under the /school/ directory.
     4- Execute a bash shell inside a *webapp* pod and verify the secret has been properly mounted.
     5- update the deployment to use the nginx:1.12.1-alpine and verify the new image is in use.
     6- Rollback the deployment and verify the typical, cuurent table version of nginx is in use again.

   IV-  AUTHENTICATION AND AUTHORIZATION

     You are cluster admin and during successful interview process, a new devops engineer called john was hired to work on a new project.
   You need to give kely access ( authentication) withi a namespace in the cluster and permit kely (authorization/RBAC) to work on the cluster.

   FOR AUTHENTICATION
    1- Tokens
    2- Certificate
       - openssl key
       - create a signing in request
       - generate the cluster certificate ca.crt and ca.key
     set the credentials into the cluster
     set the context (user)
    3- webhook (LDAAP)
  FOR AUTHORIZATION
    1 - RBAC
        create role
        create rolebinding
===================================================================================================================================================
 to know who is working on the cluster
    kubectl config get-contexts
    kubectl config view
    create ns
    create user and passwd
    create the key - k8s doc , look for authentication 
    first ( generate the openssl genrsa -out john.key 2048 )
                openssl req -new -key john.ca -out john-csr -subj "/CN=john/O=devops"
    cluster cert --> openssl x509 -req -in server.csr -CA ca.crt -CAkey ca.key \
                     -CAcreateserial -out server.crt -days 10000 \
                      -extensions v3_ext -extfile csr.conf -sha256
